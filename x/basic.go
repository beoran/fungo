package x

// import "bufio"
import "os"
import "io"
import "encoding/binary"

// Basic types for X Windows interface used by the autogenerated types
// As wel as basic binary I/O convenience functions.

type VALUE        uint32
type BYTE         byte
type INT8         int8
type INT16        int8
type INT32        int32
type CARD8        byte
type CARD16       uint16
type CARD32       uint32
type XID          uint32
type BOOL         uint8
type STRING8      string

// Used only for padding and unused bytes
type PADDING      uint8
type PADDING1     uint8
type PADDING2     uint16
type PADDING4     uint32

type UNUSED      PADDING
type UNUSED1     PADDING1
type UNUSED2     PADDING2
type UNUSED4     PADDING4

// Packing and unpacking data
// UnpackOrder unpacks a byte array to the arguments given in the varargs
func UnpackOrder(reader io.Reader, 
  order binary.ByteOrder, args... interface{}) (os.Error) {
  for _ , arg := range args {
    err := binary.Read(reader, order, arg)
    if err != nil { return err; }  
  } 
  return nil;
}
 
// Byte order that Unpack should use, Little endian by default
var UnpackByteOrder = binary.LittleEndian

// Unpack unpacks a byte array to the arguments given in the varargs
// uses binary.Read on all of the arguments to this  
func Unpack(reader io.Reader, args... interface{}) (os.Error) {
  return UnpackOrder(reader, UnpackByteOrder, args);
}

// Unpacks using Big Endian byte order
func UnpackBE(reader io.Reader, args... interface{}) (os.Error) {
  return UnpackOrder(reader, binary.BigEndian, args);
}

// Unpacks using Lyttle Endian byte order
func UnpackLE(reader io.Reader, args... interface{}) (os.Error) {
  return UnpackOrder(reader, binary.LittleEndian, args);
}

// PackOrder packs a byte array into the writer 
func PackOrder(writer io.Writer, 
  order binary.ByteOrder, args... interface{}) (os.Error) {
  for _ , arg := range args {
    err := binary.Write(writer, order, arg)
    if err != nil { return err; }  
  } 
  return nil;
}
 
// Byte order that Pack should use, Little endian by default
var PackByteOrder = binary.LittleEndian

// Pack packs a byte array to the arguments given in the varargs
// uses binary.Writeon all of the arguments to this  
func Pack(writer io.Writer, args... interface{}) (os.Error) {
  return PackOrder(writer, PackByteOrder, args);
}

// Packs using Big Endian byte order
func PackBE(writer io.Writer, args... interface{}) (os.Error) {
  return PackOrder(writer, binary.BigEndian, args);
}

// Unpacks using Lyttle Endian byte order
func PackLE(writer io.Writer, args... interface{}) (os.Error) {
  return PackOrder(writer, binary.LittleEndian, args);
}





